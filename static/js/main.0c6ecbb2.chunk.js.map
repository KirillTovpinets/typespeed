{"version":3,"sources":["helpers.js","components/DisplayText.js","components/TypeSpeedResult.js","components/Playground.js","components/Timer.js","components/GameSettings.js","components/GameBar.js","App.js","reportWebVitals.js","index.js"],"names":["getFormattedString","fractionCount","DisplayText","state","text","userInput","mistakes","cheeterTimerId","timerStarted","max","texts","this","props","language","size","Math","floor","random","document","addEventListener","handleTyping","bind","setState","prevProps","isCheeter","setAutocompleteTimer","curretSymbolIndex","startTimer","setInterval","updatedInput","getUpdatedUserInput","validateInputAndCheckProgress","index","content","event","key","startsWith","checkTheGameProgress","input","finishTheGameAndStopTimer","stop","clearInterval","displayText","replace","Jumbotron","className","Component","TypeSpeedResult","result","Playground","Timer","minutes","seconds","start","timerId","isNewMinute","updatedMinutes","updatedSeconds","setTimer","GameSettings","startGame","onSelectLang","Input","type","name","onChange","map","keys","data","lang","value","Button","color","onClick","GameBar","stopGame","setCheeterMode","ButtonGroup","App","time","cheeterMode","charCount","calculateTheResult","units","durationInMinutes","moment","diff","ceil","target","Navbar","NavbarBrand","href","NavbarToggler","setupTimer","setupCheeterMode","handleLanguageSelection","stopTimer","tiggerStartGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0c6ecbb2.chunk.js","sourcesContent":["import moment from 'moment';\n\nexport function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function getFormattedString(fractionCount) {\n\treturn fractionCount < 10 ? `0${fractionCount}` : fractionCount;\n}\n\nexport function getCurrentTime(){\n\treturn moment();\n}\n\nexport function getDifference(time, units){\n\treturn moment().diff(time, units);\n}","import { size, startsWith, replace, isEmpty } from 'lodash';\nimport React, { Component } from 'react'\nimport { Jumbotron } from 'reactstrap';\nimport { getRandomInt } from '../helpers';\nimport texts from '../textsToType.json';\nimport './styles/DisplayText.scss'\n\nexport default class DisplayText extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttext: null,\n\t\t\tuserInput: '',\n\t\t\tmistakes: 0,\n\t\t\tcheeterTimerId: null,\n\t\t\ttimerStarted: false\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tconst state = {\n\t\t\ttext: texts[this.props.language][getRandomInt(size(texts))],\n\t\t\tuserInput: ''\n\t\t};\n\n\t\tdocument.addEventListener('keypress', this.handleTyping.bind(this))\n\n\t\tthis.setState(state);\n\t}\n\n\tcomponentDidUpdate(prevProps){\n\t\tif (prevProps.isCheeter === this.props.isCheeter) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tcheeterTimerId: this.props.isCheeter && this.setAutocompleteTimer()\n\t\t});\n\t}\n\n\tsetAutocompleteTimer(){\n\t\tlet curretSymbolIndex = 0;\n\t\tthis.props.startTimer();\n\t\treturn setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\t...this.state,\n\t\t\t\ttimerStarted: true\n\t\t\t})\n\t\t\tconst updatedInput = this.getUpdatedUserInput(curretSymbolIndex++);\n\t\t\tthis.validateInputAndCheckProgress(updatedInput);\n\t\t}, 50)\n\t}\n\n\tgetUpdatedUserInput(index){\n\t\treturn this.state.userInput + this.state.text.content[index];\n\t}\n\n\thandleTyping(event){\n\t\tif (!this.state.timerStarted) {\n\t\t\tthis.props.startTimer();\n\t\t\tthis.setState({\n\t\t\t\t...this.state,\n\t\t\t\ttimerStarted: true\n\t\t\t})\n\t\t}\n\n\t\tconst { userInput } = this.state;\n\t\tconst updatedInput = userInput + event.key;\n\t\tthis.validateInputAndCheckProgress(updatedInput);\n\t}\n\n\tvalidateInputAndCheckProgress(updatedInput){\n\t\tconst { text } = this.state;\n\t\tif (startsWith(text.content, updatedInput)) {\n\t\t\tthis.checkTheGameProgress(text.content, updatedInput);\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\t...this.state,\n\t\t\t\tmistakes: this.state.mistakes + 1,\n\t\t\t\ttimerStarted: true\n\t\t\t})\n\t\t}\n\t}\n\n\tcheckTheGameProgress(content, input) {\n\t\tthis.setState({\n\t\t\t...this.state, \n\t\t\tuserInput: input,\n\t\t\ttimerStarted: true\n\t\t});\n\n\t\tif (content === input) {\n\t\t\tthis.finishTheGameAndStopTimer();\n\t\t}\n\t}\n\n\tfinishTheGameAndStopTimer(){\n\t\tthis.props.stop(size(this.state.text.content), this.state.mistakes);\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\ttimerStarted: false\n\t\t})\n\t\tclearInterval(this.state.cheeterTimerId);\n\t}\n\n\trender() {\n\t\tconst { text, userInput } = this.state;\n\t\tconst displayText = text ? replace(text.content, userInput, '') : '';\n\n\t\treturn (\n\t\t\t<Jumbotron className=\"text-container\">\n\t\t\t\t<span className=\"text-container__user-input\"> { userInput }</span>\n\t\t\t\t<span className=\"text-container__text-content\">{ displayText }</span>\n\t\t\t</Jumbotron>\n\t\t)\n\t}\n}\n","import './styles/TypeSpeedResult.scss';\n\nexport default function TypeSpeedResult({ result, mistakes }){\n\treturn (\n\t\t<div className=\"type-speed-result-container\">\n\t\t\t<span className=\"type-speed-result-container__meta-item\">{result} сим/мин</span>\n\t\t\t<span className=\"type-speed-result-container__meta-item\">Вы допустили { mistakes } ошибок</span>\n\t\t</div>\n\t)\n}","import DisplayText from \"./DisplayText\"\nimport TypeSpeedResult from \"./TypeSpeedResult\";\n\nexport default function Playground({ stop, result, mistakes, language, isCheeter, startTimer }) {\n\treturn (\n\t\t<div>\n\t\t\t<DisplayText stop={stop} \n\t\t\tisCheeter={isCheeter}\n\t\t\tstartTimer={startTimer}\n\t\t\tlanguage={language}/>\n\t\t\t{ result !== 0 && \n\t\t\t\t<TypeSpeedResult result={result} mistakes={mistakes}/>\n\t\t\t}\n\t\t</div>\n\t)\n}","import React, { Component } from 'react'\nimport { getFormattedString } from '../helpers';\nimport './styles/Timer.scss'\n\nexport default class Timer extends Component {\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tminutes: 0,\n\t\t\tseconds: 0,\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps){\n\t\tif (prevProps.start == this.props.start) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconst timerId = setInterval(() => {\n\t\t\tconst { minutes, seconds } = this.state;\n\t\t\tconst isNewMinute = seconds === 59;\n\t\t\tconst updatedMinutes = isNewMinute ? minutes + 1 : minutes;\n\t\t\tconst updatedSeconds = isNewMinute ? 0 : seconds + 1;\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\t...this.state,\n\t\t\t\tminutes: updatedMinutes,\n\t\t\t\tseconds: updatedSeconds\n\t\t\t})\n\t\t}, 1000)\n\t\tthis.props.setTimer(timerId);\n\t}\n\n\trender() {\n\t\tconst { minutes, seconds } = this.state;\n\t\treturn (\n\t\t\t<span className=\"timer\">{ getFormattedString(minutes) }:{ getFormattedString(seconds) }</span>\n\t\t)\n\t}\n}\n","import { keys, map } from 'lodash';\nimport { Button, Input } from 'reactstrap';\nimport './styles/GameSettings.scss';\nimport data from '../textsToType.json';\n\nexport default function GameSettings({ startGame, onSelectLang }){\n\treturn (\n\t\t<div className=\"game-setting\">\n\t\t\t<Input type=\"select\" name=\"select\"\n\t\t\tonChange={(event) => onSelectLang(event)}\n\t\t\tclassName=\"game-setting__lang-select\">\n\t\t\t\t{map(keys(data), (lang, index) => (\n\t\t\t\t\t<option value={lang} key={index}>{lang}</option>\n\t\t\t\t))}\n\t\t\t\t\t</Input>\n\t\t\t<Button color=\"success\" onClick={() => startGame() }> Начать </Button>\n\t\t</div>\n\t)\n}","import { Button, ButtonGroup } from \"reactstrap\";\nimport Timer from \"./Timer\";\nimport './styles/GameBar.scss'\n\nexport default function GameBar({ stopGame, setTimer, setCheeterMode, startGame }) {\n\treturn (\n\t\t<div className=\"game-bar-container\">\n\t\t\t<Timer setTimer={ setTimer } start={ startGame } />\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button color=\"success\" onClick={ stopGame }> Закончить </Button>\n\t\t\t\t<Button color=\"danger\" onClick={ setCheeterMode }>Читер</Button>\n\t\t\t</ButtonGroup>\n\t\t</div>\n\t)\n}","import './App.css';\nimport React, { Component } from 'react';\nimport { Navbar, NavbarBrand, NavbarToggler, Button } from \"reactstrap\";\nimport Playground from './components/Playground';\nimport Timer from './components/Timer';\nimport { getCurrentTime, getDifference } from './helpers';\nimport GameSettings from './components/GameSettings';\nimport GameBar from './components/GameBar';\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tstartGame: false,\n\t\t\tstartTimer: false,\n\t\t\ttimerId: null,\n\t\t\tresult: 0,\n\t\t\ttime: 0,\n\t\t\tmistakes: 0,\n\t\t\tlanguage: 'en',\n\t\t\tcheeterMode: false\n\t\t}\n\t}\n\n\tstartGame(){\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tstartGame: true,\n\t\t\tresult: 0,\n\t\t\tcheeterMode: false\n\t\t})\n\t}\n\n\tstopGame(){\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tstartGame: false,\n\t\t\tstartTimer: false,\n\t\t\ttime: 0,\n\t\t\tcheeterMode: false\n\t\t})\n\t}\n\n\tstopTimer(charCount, mistakes){\n\t\tclearInterval(this.state.timerId);\n\t\tthis.calculateTheResult(charCount, mistakes)\n\t}\n\n\tcalculateTheResult(charCount, mistakes){\n\t\tconst durationInSeconds = getDifference(this.state.time, 's');\n\t\tconst durationInMinutes = durationInSeconds / 60;\n\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tresult: Math.ceil(charCount / durationInMinutes),\n\t\t\tmistakes\n\t\t})\n\t}\n\n\tcomponentDidMount(){\n\t\tdocument.addEventListener('keypress', (event) => event.key === 'Enter' && this.startGame())\n\t}\n\n\tsetupTimer(timerId) {\n\t\tif (!timerId) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\ttimerId\n\t\t})\n\t}\n\n\ttiggerStartGame(){\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\ttime: getCurrentTime(),\n\t\t\tstartTimer: true\n\t\t})\n\t}\n\n\tsetupCheeterMode(){\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tcheeterMode: true\n\t\t})\n\t}\n\n\thandleLanguageSelection(event){\n\t\tconst { value } = event.target;\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tlanguage: value\n\t\t})\n\t}\n\n  render(){\n\t\tconst { startGame, result, mistakes, language, cheeterMode, startTimer } = this.state;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Navbar color=\"dark\">\n\t\t\t\t\t<NavbarBrand href=\"/\">Type Speed</NavbarBrand>\n\t\t\t\t\t<NavbarToggler />\n\t\t\t\t\t{ startGame && <GameBar \n\t\t\t\t\tsetTimer={this.setupTimer.bind(this)} \n\t\t\t\t\tstartGame={ startTimer }\n\t\t\t\t\tsetCheeterMode={this.setupCheeterMode.bind(this)}\n\t\t\t\t\tstopGame={this.stopGame.bind(this)} /> }\n\t\t\t\t\t{ !startGame &&  <GameSettings \n\t\t\t\t\tstartGame={this.startGame.bind(this)} \n\t\t\t\t\tstopGame={this.stopGame.bind(this)}\n\t\t\t\t\tonSelectLang={this.handleLanguageSelection.bind(this)}\n\t\t\t\t\t/>}\n\t\t\t\t</Navbar>\n\t\t\t\t{\n\t\t\t\t\tstartGame &&\n\t\t\t\t\t\t<Playground \n\t\t\t\t\t\tstop={this.stopTimer.bind(this)}\n\t\t\t\t\t\tstartTimer={this.tiggerStartGame.bind(this)}\n\t\t\t\t\t\tlanguage={language}\n\t\t\t\t\t\tresult={result}\n\t\t\t\t\t\tisCheeter={cheeterMode}\n\t\t\t\t\t\tmistakes={mistakes}/>\n\t\t\t\t}\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}